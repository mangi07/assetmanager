openapi: 3.0.0
info:
  title: "Asset Manager"
  description: "Documentation for the Asset Manager API"
  version: 1.0.0
servers:
- url: "https://mangi07.pythonanywhere.com/api/v1"
  description: "Development server."
tags:
- name: "assets"
  description: "Bulk creation, bulk deletion, and bulk update of assets."
- name: "asset"
  description: "View asset detail.  Put, patch, or delete an asset."
- name: "locations"
  description: "Bulk creation, bulk deletion, and bulk update of locations."
paths:
  /assets:
    get:
      tags:
      - "assets"
      summary: "Paginated listing of assets with optional filtering in query parameters."
      parameters:
      - name: description
        in: query
        required: false
        description: Filter results that contain the exact matching description.
        schema:
          type: string
          example: "4-coil electric range"
      - name: description__like
        in: query
        required: false
        description: Filter results that contain the given text in the description.
        schema:
          type: string
          example: "range"
      - name: original_cost
        in: query
        required: false
        description: Filter results that contain the exact matching original cost.
        schema:
          type: decimal
          minumum: 0
          maximum: 9999999999.99
          example: 1499.99
      - name: original_cost__lt
        in: query
        required: false
        description: Filter results that are less than the given cost.
        schema:
          type: decimal
          minumum: 0
          maximum: 9999999999.99
          example: 2000
      - name: original_cost__gt
        in: query
        required: false
        description: Filter results that are more than the given cost.
        schema:
          type: decimal
          minumum: 0
          maximum: 9999999999.99
          example: 1000
      - name: location
        in: query
        required: false
        description: Filter results that are at the given location description.
        schema:
          type: string
          example: "kitchen"
      responses:
        200:
          description: "OK - Successfully listed assets."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaginatedAssetResponse"
        400:
          description: "Bad request - No assets listed."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    post:
      tags:
      - "assets"
      summary: "Bulk creation and bulk deletion of assets.  TODO: document delete after refactoring to add /assets/bulkDelete/"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AssetCreate"
        required: true
      responses:
        201:
          description: "OK - All assets were created successfully."
          content: {}
        400:
          description: "Bad request - No assets created."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    patch:
      tags:
      - "assets"
      summary: "Bulk update of assets.  If there are any errors in the request, none of the assets will be updated."
      description: "Updating an asset's location counts is done as a whole.  For example, if one asset has counts at locations A and B and the asset is patched with a list of location counts containing only location C, then the asset will loose its counts at locations A and B and only have a count at location C.  So in order to add a new location count and retain the original counts, you would need to submit the orinal counts in addition to the new one.\n\nAlso, duplicate locations are not allowed."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AssetPatchBulk"
        required: true
      responses:
        200:
          description: "OK - All assets were updated succesfully."
        400:
          description: "Bad request - No assets updated."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
  /assets/{id}:
    get:
      tags:
      - "asset"
      summary: "Asset detail."
      parameters:
      - name: id
        in: path
        description: "ID of asset to return."
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
          example: 2
      responses:
        200:
          description: "OK - Successfully fetched asset with given id."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetResponse"
        400:
          description: "Bad request - No asset with given ID found."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    put:
      tags:
      - "asset"
      summary: "Replace resource with new asset details."
      parameters:
      - name: id
        in: path
        description: "ID of asset."
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
          example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetPut"
        required: true
      responses:
        200:
          description: "OK - Successfully put asset with given id."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetResponse"
        400:
          description: "Bad request - No asset with given ID found."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    patch:
      tags:
      - "asset"
      summary: "Update resource with new asset details."
      parameters:
      - name: id
        in: path
        description: "ID of asset to update."
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
          example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetPatch"
        required: true
      responses:
        200:
          description: "OK - Successfully patched asset with given id."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetResponse"
        400:
          description: "Bad request - No asset with given ID found."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    delete:
      tags:
      - "asset"
      summary: "Delete asset with given id."
      parameters:
      - name: id
        in: path
        description: "ID of asset to delete."
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
          example: 2
      responses:
        200:
          description: "OK - Successfully patched asset with given id."
        400:
          description: "Bad request - No asset with given ID found."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
  /locations:
    get:
      tags:
      - "locations"
      summary: "Paginated listing of locations with optional filtering in query parameters."
      parameters:
      - name: description
        in: query
        required: false
        description: Filter results that contain the exact matching description.
        schema:
          type: string
          example: "kitchen"
      - name: description__like
        in: query
        required: false
        description: Filter results that contain the given text in the description.
        schema:
          type: string
          example: "kit"
      responses:
        200:
          description: "OK - Successfully listed locations."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLocationGet"
        400:
          description: "Bad request - No locations listed."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    post:
      tags:
      - "locations"
      summary: "Bulk creation and bulk deletion of locations."
      description: "A location cannot be deleted if there is an asset at that location.  Nor can two locations with the same description be nested under the same parent location.  TODO: document delete after refactoring to add /locations/bulkDelete/"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LocationCreate"
      responses:
        201:
          description: "OK - Successfully created locations."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationCreateResponse"
        400:
          description: "Bad request - No locations created."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
    patch:
      tags:
      - "locations"
      summary: "Bulk update of locations."
      description: "If there are any errors in the request, none of the locations will be updated."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LocationUpdate"
      responses:
        200:
          description: "OK - Successfully updated locations."
          content: {}
        400:
          description: "Bad request - No locations updated."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
  /assets/bulkDelete:
    patch:
      tags:
      - "assets"
      summary: "Bulk deletion of assets."
      description: "If there are any errors in the request, none of the assets will be deleted."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDeleteList"
      responses:
        200:
          description: "OK - Successfully deleted assets."
          content: {}
        400:
          description: "Bad request - No assets deleted."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
  /locations/bulkDelete:
    patch:
      tags:
      - "locations"
      summary: "Bulk deletion of locations."
      description: "If there are any errors in the request, none of the locations will be deleted."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkDeleteList"
      responses:
        200:
          description: "OK - Successfully deleted locations."
          content: {}
        400:
          description: "Bad request - No locations deleted."
        403:
          description: "Forbidden."
        404:
          description: "Not found."
        500:
          description: "Internal server error."
                
      
    
components:
  schemas:
    AssetPatchBulk:
      allOf:
        - $ref: "#/components/schemas/AssetParentModel"
        - type: object
          required:
          - id
          properties:
            id:
              type: string
              example: "000000002"
    AssetPatch:
      allOf:
        - $ref: "#/components/schemas/AssetParentModel"
        - type: object
    AssetCreate:
      allOf:
        - $ref: "#/components/schemas/AssetParentModel"
        - type: object
          required:
          - description
          - original_cost
    AssetPut:
      allOf:
        - $ref: "#/components/schemas/AssetParentModel"
        - type: object
          required:
          - description
          - original_cost
    AssetResponse:
      allOf:
        - $ref: "#/components/schemas/AssetParentModel"
        - type: object
          required:
          - description
          - original_cost
          - location
          - created
          properties:
            created:
              type: string
              example: "2019-03-27T00:17:07.494727Z"
              description: "Date the asset was first entered into the system."
    AssetParentModel:
      type: object
      properties:
        description:
          type: string
          example: "4-coil electric range"
        original_cost:
          type: decimal
          minumum: 0
          maximum: 9999999999.99
          example: 1499.99
        locations:
          type: array
          items:
            $ref: "#/components/schemas/LocationCount"
        
    
    LocationCount:
      type: object
      required:
      - id
      - location
      - count
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: "Location id."
          example: 40
        location:
          type: string
          description: "Identifies a particular location.  Locations can be nested.  If the location is nested (has parent location), in a response this nesting may be represented in the location's description, such as 'cafeteria >> kitchen'."
          example: "kitchen"
        count:
          type: integer
          format: int64
          minimum: 0
          description: "Identifies the number of assets counted at the location."
          example: 1
    
    LocationUpdate:
      allOf:
        - $ref: "#/components/schemas/LocationParentModel"
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              description: "Unique ID needed to refer to location for updates."
              minimum: 1
              example: 40
    LocationGet:
      allOf:
        - $ref: "#/components/schemas/LocationParentModel"
        - type: object
          required:
            - id
            - description
            - in_location
            - created
          properties:
            id:
              type: integer
              minimum: 1
              example: 40
            location_nesting:
              type: string
              description: "Represents which parent location this location is nested under."
              example: "cafeteria >> kitchen"
    LocationCreate:
      allOf:
        - $ref: "#/components/schemas/LocationParentModel"
        - type: object
          required:
          - description
    LocationCreateResponse:
      allOf:
        - $ref: "#/components/schemas/LocationParentModel"
        - type: object
          required:
            - id
            - description
            - created
            - in_location
            - location_nesting
          properties:
            id:
              type: integer
              minimum: 1
              example: 40
            location_nesting:
              type: string
              description: "Represents which parent location this location is nested under."
              example: "cafeteria >> kitchen"
    LocationParentModel:
      type: object
      properties:
        description:
          type: string
          description: "Identifies a particular location.  Locations can be nested.  If the location is nested (has parent location), in a response this nesting may be represented in the location's 'location_nesting' property, such as 'cafeteria >> kitchen'."
          example: "kitchen"
        in_location:
          type: string
          description: "Identifies the parent location where this location is nested.  For example, if the location is 'cafeteria >> kitchen' then the description is 'kitchen' and in_location is 'cafeteria'."
          example: "cafeteria"
        created:
          type: string
          example: "2019-03-27T00:17:07.494727Z"
          description: "Date the location was first entered into the system."
    
    PaginatedAssetResponse:
      allOf:
        - $ref: "#/components/schemas/PaginationModel"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/AssetResponse"
    PaginatedLocationGet:
      allOf:
        - $ref: "#/components/schemas/PaginationModel"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/LocationGet"
    PaginationModel:
      type: object
      required:
      - next
      - previous
      - results
      properties:
        next:
          type: string
          description: "The url for the next set of results."
          example: "http://localhost:8000/api/v1/locations?cursor=cD0yMDE5LTA0LTEwKzAyJTNBMDklM0EwMC4zNTExNDIlMkIwMCUzQTAw"
        previous:
          type: string
          description: "The url for the previous set of results."
          example: "http://localhost:8000/api/v1/locations?cursor=cj0xJnA9MjAxOS0wNC0xMCswMiUzQTA5JTNBMDAuMzQyMDY1JTJCMDAlM0EwMA%3D%3D"
          
    BulkDeleteList:
      type: array
      items:
        type: integer
        minimum: 0
        example: 40

          